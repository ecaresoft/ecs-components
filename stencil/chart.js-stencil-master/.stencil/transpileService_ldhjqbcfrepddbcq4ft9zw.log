{"moduleFile":{"sourceFilePath":"/Users/guillermo/Documents/GitHub/ecs-components/stencil/chart.js-stencil-master/src/components/chart-js/chart-js.tsx","localImports":[],"externalImports":["@stencil/core","chart.js","chart.js"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"chart-js","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/guillermo/Documents/GitHub/ecs-components/stencil/chart.js-stencil-master/src/components/chart-js/chart-js.css","cmpRelativePath":"chart-js.css","originalComponentPath":"chart-js.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"ChartJs","documentation":"","type":"typeof ChartJs"},"encapsulationMeta":0,"componentClass":"ChartJs","membersMeta":{"el":{"memberType":7},"data":{"memberType":1,"attribName":"data","attribType":{"text":"any","typeReferences":{}},"reflectToAttrib":false,"propType":1,"jsdoc":{"name":"data","documentation":"","type":"any"},"watchCallbacks":["dataWatcher"]},"isServer":{"memberType":3,"ctrlId":"isServer"}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/guillermo/Documents/GitHub/ecs-components/stencil/chart.js-stencil-master/src/components/chart-js/chart-js.js"},"jsText":"// TODO: Use @types/chart.js\r\nimport * as chartjs from 'chart.js';\r\nconst { Chart } = chartjs.default.Chart;\r\nexport class ChartJs {\r\n    dataWatcher(newData) {\r\n        console.log('chart-js::dataWatcher', newData);\r\n        this.myChartInstance.data.labels = newData.labels;\r\n        this.myChartInstance.data.datasets.forEach((dataset) => {\r\n            dataset.data = newData.values;\r\n        });\r\n        this.myChartInstance.update();\r\n    }\r\n    componentDidLoad() {\r\n        if (!this.isServer) {\r\n            // this.canvas = this.el.shadowRoot.querySelector('canvas');\r\n            this.canvas = this.el.querySelector('canvas');\r\n            this.canvas.width = 400;\r\n            this.canvas.height = 300;\r\n            this.context = this.canvas.getContext('2d');\r\n            const chartOptions = {\r\n                type: 'line',\r\n                data: {\r\n                    labels: this.data.labels,\r\n                    datasets: [{\r\n                            label: this.data.caption[0],\r\n                            data: this.data.values,\r\n                            backgroundColor: [\r\n                                'rgba(0, 163, 218, 1.0)'\r\n                                // 'rgba(54, 162, 235, 0.2)',\r\n                                // 'rgba(255, 206, 86, 0.2)',\r\n                                // 'rgba(75, 192, 192, 0.2)',\r\n                                // 'rgba(153, 102, 255, 0.2)',\r\n                                // 'rgba(255, 159, 64, 0.2)'\r\n                            ],\r\n                            // borderColor: [\r\n                            //   'rgba(255,99,132,1)',\r\n                            //   'rgba(54, 162, 235, 1)',\r\n                            //   'rgba(255, 206, 86, 1)',\r\n                            //   'rgba(75, 192, 192, 1)',\r\n                            //   'rgba(153, 102, 255, 1)',\r\n                            //   'rgba(255, 159, 64, 1)'\r\n                            // ],\r\n                            borderWidth: 1\r\n                        }]\r\n                },\r\n                options: {\r\n                    animation: {\r\n                        duration: 0\r\n                    },\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true\r\n                                }\r\n                            }]\r\n                    }\r\n                }\r\n            };\r\n            this.myChartInstance = new Chart(this.context, chartOptions);\r\n        }\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: 'chart-container', style: { position: 'relative', height: '65vh', width: '100%' } },\r\n            h(\"canvas\", { width: '400', height: '300' })));\r\n    }\r\n    static get is() { return \"chart-js\"; }\r\n    static get properties() { return {\r\n        \"data\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"data\",\r\n            \"watchCallbacks\": [\"dataWatcher\"]\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"isServer\": {\r\n            \"context\": \"isServer\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:chart-js:**/\"; }\r\n}\r\n"}